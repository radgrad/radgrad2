import { Meteor } from 'meteor/meteor';
import { expect } from 'chai';
import faker from 'faker';
import fc from 'fast-check';
import 'mocha';
import { makeSampleInterest } from '../interest/SampleInterests';
import { removeAllEntities } from '../base/BaseUtilities';
import slugify from '../slug/SlugCollection';

/* eslint prefer-arrow-callback: "off",  @typescript-eslint/no-unused-expressions: "off" */
/* eslint-env mocha */

if (Meteor.isServer) {
  describe('<Name>', function testSuite() {

    before(function setup() {
      removeAllEntities();
    });

    after(function teardown() {
      removeAllEntities();
    });

    it('Can define and removeIt', function test1(done) {
      this.timeout(5000);
      //fc.assert(
        // fc.property(<fc parameters>, (<fc parameters>) => {
          // set up additional parameters for define
          // const docID = <Name>.define({params});
          // expect(<Name>.isDefined(docID)).to.be.true;
          // check to see if correctly defined
          // <Name>.removeIt(docID);
          // expect(<Name>.isDefined(docID)).to.be.false;
       //  }),
      // );
      done();
    });

    it('Cannot define duplicates', function test2() {
      // The behavior depends upon the rules for duplicates in the collection.
      // set up additional parameters for define
      // const docID1 = <Name>.define({params});
      // const docID2 = <Name>.define({params});
      // expect(docId1).to.equal(docId2);
      // expect(<Name>.isDefined(docID1)).to.be.true;
      // expect(<Name>.isDefined(docID2)).to.be.true;
      // <Name>.removeIt(docId1);
      // expect(<Name>.isDefined(docId1)).to.be.false;
      // expect(<Name>.isDefined(docId2)).to.be.false;
    });

    it('Can update', function test3(done) {
      this.timeout(5000);
      // set up additional parameters for define
      // define an instance
      // const docID = <Name>.define({params});
      // fc.assert(
        // fc.property(<fc parameters>, (<fc parameters>) => {
          // Optionally create other update parameters, interests, slugs, etc.
          // <Name>.update(docID, { parameter: fcParameter, ... });
          // const doc = <Name>.findDoc(docID);
          // expect(doc.parameter).to.equal(fcParameter); for each parameter
      //  }),
      // );
      done();
    });

    it('Can dumpOne, removeIt, and restoreOne', function test4() {

    });

    it('Can checkIntegrity no errors', function test5() {
      // const errors = <Name>.checkIntegrity();
      // expect(errors.length).to.equal(0); or number based upon the true errors
    });

    /* ====================================================== */
    // The rest of the public functions of the collection.
    /* ====================================================== */

  });
}

    it('Can define and removeIt', function test1(done) {
      this.timeout(5000);
      done();
    });

    it('Cannot define duplicates', function test2() {

    });

    it('Can update', function test3(done) {
      this.timeout(5000);
      done();
    });

    it('Can dumpOne, removeIt, and restoreOne', function test4() {

    });

    it('Can checkIntegrity no errors', function test5() {

    });
